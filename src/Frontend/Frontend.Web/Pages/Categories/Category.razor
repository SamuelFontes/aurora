@page "/categories"
@using Backend.Domain.Entities.Authentication.Users.UserContext;
@using Backend.Domain.Entities.SubCategories;
@using Backend.Domain.Entities.Categories;
@using Frontend.Web.Services.Authentication;
@using Frontend.Web.Services.Categories;
@using Frontend.Web.Services.SubCategories;
@inject AuthenticationService _authenticationService;
@inject CategoryService _categoryService;
@inject SubCategoryService _subCategoryService;


<PageTitle>Aurora - Products</PageTitle>

<aside class="right-sidebar @formCssClass">
    <Frontend.Web.Components.Categories.Forms.Add.AddCategory CollapseRightSidebar=collapseForm ToggleRightSidebar="ToggleForm" />
</aside>
<div class="container-fluid">
    <div class="row">
        <div class="m-4">
            <button class="btn btn-outline-primary" @onclick="ToggleForm">
                @btnText
            </button>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 d-flex align-items-stretch">
            <div class="card w-100">
                <div class="card-body">
                    <div class="accordion" id="accordionExample">
                        @foreach (var item in items)
                        {
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="@($"heading{item.Id}")">
                                    <button class="accordion-button @(item.IsCollapsed ? "collapsed" : "collapse show")"
                                            type="button"
                                            data-bs-toggle="collapse"
                                            data-bs-target="@($"#collapse{item.Id}")"
                                            aria-expanded="@(item.IsCollapsed ? "false" : "true")"
                                            aria-controls="@($"collapse{item.Id}")"
                                        @onclick="(e => ToggleAccordionItem(item.Id))">
                                            @item.Title
                                    </button>
                                </h2>
                                <div id="@($"collapse{item.Id}")" 
                                    class="accordion-collapse collapse @(item.IsCollapsed ? "collapse" : "collapse show")" 
                                    aria-labelledby="@($"heading{item.Id}")" 
                                    data-bs-parent="#accordionExample">
                                    <div class="accordion-body">
                                        @if(item.Body != string.Empty)
                                        {
                                            @item.Body
                                        }
                                        else
                                        {
                                            <div class="align-items-center">
                                                None sub-categories registered yet.
                                            </div>
                                        }
                                        <div class="d-flex flex-row justify-content-end p-1">
                                            <button type="button" class="btn btn-success">
                                                <div class="d-flex align-items-center">
                                                    Add sub-category <i class="ti ti-circle-plus ms-1 fs-5"></i>
                                                </div>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    private void ToggleForm()
    {
        collapseForm = !collapseForm;
    }
}

@code
{
    private bool collapseForm = true;
    private string? formCssClass => collapseForm ? null : "show-menu";
    private string? btnText => collapseForm ? "New" : "Hide menu";
    private List<AccordionItem> items = new List<AccordionItem>();


    private class AccordionItem
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Body { get; set; }
        public bool IsCollapsed { get; set; } = true;
    }

    private void ToggleAccordionItem(int itemId)
    {
        var item = items.FirstOrDefault(i => i.Id == itemId);
        if (item != null)
        {
            item.IsCollapsed = !item.IsCollapsed;
        }
    }
}

@code
{
    public List<Backend.Domain.Entities.Categories.Category> categories = new List<Backend.Domain.Entities.Categories.Category>();
    public List<SubCategory> subCategories = new List<SubCategory>();
    private UserSessionContext context = new UserSessionContext();

    protected override async Task OnInitializedAsync()
    {
        context = await _authenticationService.GetContext();

        var response = (await GetCategoriesAndSubCategories(context.Tenant.Id.ToString())).ToList();
        categories = response;
        subCategories = response.SelectMany(x => x.SubCategories).ToList();

        items = new List<AccordionItem>();
        int count = 0;
        foreach (var category in categories)
        {
            if (!category.SubCategories.Any())
                items.Add(new AccordionItem()
                {
                    Id = count++,
                    Title = category.CategoryName,
                    Body = string.Empty,
                    IsCollapsed = true
                });

            foreach (var subCategory in subCategories.Where(sc => sc.CategoryId == category.CategoryId))
            {
                items.Add(new AccordionItem()
                {
                    Id = count++,
                    Title = category.CategoryName,
                    Body = subCategory.SubCategoryName,
                    IsCollapsed = true
                });
            }
        }
    }

    public async Task<IEnumerable<Backend.Domain.Entities.Categories.Category>> GetCategoriesAndSubCategories(string tenantId)
    {
        return await _categoryService.GetCategoriesAndSubCategories(tenantId);
    }
}