@page "/login"
@using Frontend.Web.Util.Session;
@using Backend.Domain.Entities.Authentication.Users.Login.Request;
@using System.Text.Json;
@using System.Text;
@using Backend.Domain.Entities.Authentication.Users.UserContext;
@inject HttpClient _http
@inject SessionStorageAccessor _session

<div class="container" style="margin-top:30px">
<div class="col-md-4">
    <div class="panel panel-default">
  <div class="panel-heading"><h3 class="panel-title"><strong>Sign In </strong></h3></div>
  <div class="panel-body">
   <form role="form">
  <div class="form-group">
    <label for="exampleInputEmail1">Username or Email</label>
    <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Enter email" @bind="@model.Username">
  </div>
  <div class="form-group">
    <label for="exampleInputPassword1">Password </label>
    <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password" @bind="@model.Password">
  </div>
  <button type="button" @onclick="SignIn" class="btn btn-default">Sign in</button>
</form>
  </div>
</div>
</div>
</div>


@code {

    /*
        Leo: Somehow, figure out how to uncouple this logical code piece from the entire html file.

        instead of having this write here
        folder structure would look like this:
        Pages > Login > Views > Login.razor
        Pages > Login > Actions (i guess, need to re-think a name) > Action.razor
        then import action.razor inside login.razor, this should look better.
    */

    private LoginRequest model = new LoginRequest();

    // We should return this a bool or the model maybe, in the future it could be useful to build the user UI.
    // I can explain later.
    private async void SignIn()
    {
        var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7299/Authentication/Login"); // TODO: use environment variables.
        request.Content = new StringContent(JsonSerializer.Serialize(model), Encoding.UTF8, "application/json");
        var response = await _http.SendAsync(request);

        var userSession = await response.Content.ReadFromJsonAsync<UserSessionContext>();

        // this looks stupid but trust me
        await _session.SetValueAsync("UserSession", JsonSerializer.Serialize(userSession));

    }
}
