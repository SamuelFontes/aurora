@using Backend.Domain.Entities.Authentication.Users.Login.Request;
@using Backend.Domain.Entities.Authentication.Users.UserContext;
@using Frontend.Web.Services.Authentication
@inject AuthenticationService _authenticationService;
@inject NavigationManager Navigator

<div class="col-md-8 col-lg-6 col-xxl-3 position-relative">
    <div class="card mb-0">
        <div class="card-body">
            <a class="text-nowrap logo-img text-center d-block py-3 w-100">
                <h3 class="panel-title"><strong>Aurora</strong></h3>
            </a>
            <p class="text-center">Log in your account</p>
            @if (isLoading)
            {
                <div class="z-3 position absolute h-100 d-flex align-items-center justify-content-center">
                    <Frontend.Web.Components.Loader.LoadingSpinner />
                </div>
            }
            @if (logged.HasValue && logged.Value)
            {
                <div class="alert alert-success fade-in" role="alert">
                    Success, redirecting to main page.
                </div>
            }
            else if (logged.HasValue && !logged.Value)
            {
                <div class="alert alert-warning fade-in" role="alert">
                    Something went wrong.
                </div>
            }
            <form>
                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <input type="email" class="form-control" id="username" placeholder="Enter email" @bind="@model.Username">
                </div>
                <div class="mb-4">
                    <label for="password" class="form-label">Password</label>
                    <input type="password" class="form-control" id="password" placeholder="Password" @bind="@model.Password">
                </div>
                <button type="button" @onclick="SignIn" class="btn btn-primary w-100 py-8 fs-4 mb-4 rounded-2">Log in</button>
            </form>
        </div>
    </div>
</div>
@code
{
    public bool isLoading;

    public bool? logged;
    private LoginRequest model = new LoginRequest();
    protected override async Task OnInitializedAsync()
    {
        bool isAuthenticated = await _authenticationService.IsUserLogged();
        if (isAuthenticated)
            Navigator.NavigateTo("/", true);
    }

    public async Task<bool> SignIn()
    {
        if (string.IsNullOrEmpty(model.Username) || string.IsNullOrEmpty(model.Password))
        {
            throw new Exception("Fields are empty");
        }
        isLoading = true;
        logged = await _authenticationService.SignIn(model);
        RedirectAfterSuccess(logged.Value);
        isLoading = false;
        return logged.Value;
    }
    
    public void RedirectAfterSuccess(bool logged)
    {
        if (logged) Navigator.NavigateTo("/", true);
    }
}
