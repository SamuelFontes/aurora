@using Backend.Domain.Entities.Authentication.Users.UserContext;
@using Frontend.Web.Services.Authentication;
@inject IJSRuntime JS
@inherits LayoutComponentBase
@inject AuthenticationService _authService
@inject NavigationManager navigator

<div class="page-wrapper" id="main-wrapper" data-layout="vertical" data-navbarbg="skin6" data-sidebartype="full" data-sidebar-position="fixed" data-header-position="fixed">
    @if (isAuthenticated)
    {
        <div class="sidebar-nav scroll-sidebar @NavMenuCssClass">
            <Sidebar />
        </div>
        <div class="body-wrapper">
            <Topbar CollapseNavMenu="collapseNavMenu" ToggleNavMenu="ToggleNavMenu" />
            @Body
        </div>
    }
    else
    {
        @Body
    }
</div>

@* Inject js dependencies 
FYI: Not using it right now but this is a sample on how we inject js in Blazor Wasm
@code
{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeAsync<IJSObjectReference>("import", "./js/sidebarmenu.js");
        }
    }
}
*@

@* Authentication and Authorization *@
@code
{
    public bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await IsAuthenticated();
        Redirect(isAuthenticated);
    }

    public void Redirect(bool isAuthenticated)
    {
        if (!isAuthenticated)
            navigator.NavigateTo("/Login");
    }

    public async Task<bool> IsAuthenticated()
    {
        return await _authService.IsUserLogged() != null;
    }
}

@* Sidebar Interaction *@
@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
