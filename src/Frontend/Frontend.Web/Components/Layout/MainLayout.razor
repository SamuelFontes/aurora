@using Backend.Domain.Entities.Authentication.Users.UserContext;
@using Frontend.Web.Services.Authentication;
@inject IJSRuntime JS
@inherits LayoutComponentBase
@inject AuthenticationService _authService
@inject NavigationManager navigator

@if (isAuthenticated)
{
    <div class="page-wrapper @NavMenuCssClass" id="main-wrapper" data-layout="vertical" data-navbarbg="skin6" data-sidebartype="full" data-sidebar-position="fixed" data-header-position="fixed" data-bs-theme=@(Theme ? "dark" : "light")>
        <Sidebar CollapseNavMenu="collapseNavMenu" ToggleNavMenu="ToggleNavMenu" Theme=Theme/>
        <div class="body-wrapper">
            <Topbar CollapseNavMenu="collapseNavMenu" ToggleNavMenu="ToggleNavMenu" Theme=Theme/>
            @Body
        </div>
    </div>
}
else
{
    <div data-layout="vertical" data-navbarbg="skin6" data-sidebartype="full" data-sidebar-position="fixed" data-header-position="fixed" data-bs-theme=@(Theme ? "dark" : "light")>
        @Body
    </div>
}

@code
{
    // Por enquanto vou deixar assim mas acho que o ideal seria um enum int com varios estilos mas tanto faz
    // Update: como radiobutton é limitado vai ter que ser com int mesmo :)
    // DarkMode = true 
    // LightMode = false
    private bool Theme = false;
}

@code 
{
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? null : "show-sidebar";

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}

@code 
{
    public bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await IsAuthenticated();
        Redirect(isAuthenticated);
    }

    public void Redirect(bool isAuthenticated)
    {
        if (!isAuthenticated)
            navigator.NavigateTo("/Login");
        else
            navigator.NavigateTo(navigator.Uri);
    }

    public async Task<bool> IsAuthenticated()
    {
        var response = await _authService.IsUserLogged();
        return response.GetValueOrDefault();
    }
}


