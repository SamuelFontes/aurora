@using Backend.Domain.Entities.Agent
@using Frontend.Web.Services.Authentication
@using Frontend.Web.Services.Agents
@using Frontend.Web.Util.Session
@using Microsoft.AspNetCore.Components.Forms
@inject AgentService _agentService
@inject AuthenticationService _authenticationService
@inject NavigationManager navigator

<div>
    <i class="ti ti-x cursor-pointer p-4" @onclick="ToggleRightSidebar"></i>
</div>
<div class="container scroll-sidebar" style="max-height:550px; overflow-y:auto;">
    <div class="card-body p-2">
        <EditForm Model="@agent" >
            <div class="row">
                <div class="mb-2 col-sm-12">
                    <label for="name" class="form-label">Name</label>
                    <InputText class="form-control" id="name" placeholder="Agent Name" @bind-Value="@agent.Name" />
                </div>
            </div>
            <div class="mb-2 col-sm-12">
                <label for="active" class="form-label">Active</label>
                <InputCheckbox class="form-check-input" id="active" @bind-Value="@agent.Active" />
            </div>
            <div class="position-fixed bottom-0 mb-9 mt-5 rounded">
                <button type="button" @onclick="CreateAgent" class="btn btn-primary">Save <i class="ti ti-device-floppy"></i></button>
            </div>
        </EditForm>
    </div>
</div>

@code
{
    private Agent agent = new Agent();

   

    private async Task CreateAgent()
    {
        try
        {
            var context = await _authenticationService.GetContext();
            agent.TenantId = context.Tenant.Id;
            Agent newAgent = await _agentService.CreateAgent(agent);
            if (newAgent != null && newAgent.Id != Guid.Empty)
                navigator.NavigateTo("/agents", true);
        }
        catch (Exception)
        {
            // Handle exceptions appropriately
            throw;
        }
    }
}

@code
{
    [Parameter] public Action ToggleRightSidebar { get; set; }
    [Parameter] public bool CollapseRightSidebar { get; set; }
}

@code
{
    @*Agent Accordion *@
    private bool collapseAgentAccordion = true;
    private string? agentAccordionHeaderToggle => collapseAgentAccordion ? null : "collapsed";
    private string? agentAccordionToggle => collapseAgentAccordion ? "collapse" : "collapse show";
    private void ToggleAgentAccordion() => collapseAgentAccordion = !collapseAgentAccordion;
}
