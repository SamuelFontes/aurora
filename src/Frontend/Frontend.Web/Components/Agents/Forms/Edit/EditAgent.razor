@using Backend.Domain.Entities.Agents;   
@using Frontend.Web.Services.Authentication;
@using Frontend.Web.Services.Agents;
@inject AgentService _agentService;
@inject NavigationManager navigator;
@inject AuthenticationService _authenticationService;

@if (isLoading)
{
    <Frontend.Web.Components.Loader.LoadingSpinner />
}
else
{
    <div class="row m-4">
        <h5 class="card-title fw-semibold mb-4">Basic info</h5>
        @if (Agent is not null && !isLoading)
        {
            <EditForm Model="Agent">
                <div class="mb-3 col-sm-12">
                    <label for="name" class="form-label">Name</label>
                    <input type="text" class="form-control" id="name" placeholder="Name" @bind="@Agent.Name">
                </div>
                <div class="mb-3 col-sm-12">
                    <label for="agentTypes" class="form-label">Agent Type</label>
                    <select class="form-select" @bind="@Agent.AgentTypeId">
                        <option value="" disabled hidden selected>Update the agent type.</option>
                        @foreach (var agentType in agentTypes)
                        {
                            <option value="@agentType.AgentTypeId">@agentType.AgentTypeName</option>
                        }
                    </select>
                </div>
                <button type="button" @onclick="UpdateAgent" class="btn btn-default float-right">Save basic info</button>
            </EditForm>
        }
        </div>
}

@code
{
    [Parameter]
    public Agent? Agent { get; set; }
    public bool isLoading;
}

@code
{
    public List<AgentType> agentTypes = new List<AgentType>();
    public async Task GetAgentTypes()
    {
        var response = await _agentService.GetAgentTypes();
        agentTypes = response.ToList();
    }
}

@code
{
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await GetAgentTypes();
        isLoading = false;
    }
}

@code
{
    public async Task UpdateAgent()
    {
        bool updated = await _agentService.UpdateAgent(Agent);
        if (updated) navigator.NavigateTo(navigator.BaseUri, true);
    }
}