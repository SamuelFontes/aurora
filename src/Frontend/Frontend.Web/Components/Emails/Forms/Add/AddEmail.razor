@using Backend.Domain.Entities.Authentication.Users.UserContext;
@using Backend.Domain.Entities.Categories;
@using Backend.Domain.Entities.Contacts;
@using Backend.Domain.Entities.SubCategories;
@using Backend.Domain.Enums.AreaCodes;
@using Frontend.Web.Services.Authentication;
@using Frontend.Web.Services.Categories;
@using Frontend.Web.Services.Contacts;
@using Frontend.Web.Services.SubCategories;
@inject AuthenticationService _authenticationService
@inject ContactService _contactService;
@inject NavigationManager navigator

<div>
    <i class="ti ti-x cursor-pointer p-4" @onclick="ToggleRightSidebar"></i>
</div>
<div class="container scroll-sidebar" style="max-height:550px; overflow-y:auto;">
    <div class="card-body p-2">
        <form>
            <div class="mb-2 col-sm-12">
                <div class="row">
                    <div class="mb-2 col-sm-10">
                        <label for="name" class="form-label">Email Address</label>
                        <input type="email" class="form-control" id="email" placeholder="email@address.com" @bind="emailAddress.EmailAddress">
                    </div>
                </div>
            </div>
            <div class="mb-2 col-sm-6">
                <button @onclick="CreateEmailAddress" type="button" class="btn btn-primary bottom-0 mb-9 mt-5 rounded">
                    Save <i class="ti ti-device-floppy"></i>
                </button>
            </div>
        </form>
    </div>
</div>

@code
{
    private Email emailAddress = new Email();
    public async Task CreateEmailAddress()
    {
        var context = await _authenticationService.GetContext();
        emailAddress.TenantId = context.Tenant.Id;
        emailAddress.AgentId = AgentId;
        Email response = await _contactService.CreateEmailAddress(emailAddress);

        if (response != null && response.EmailAddressId != new Guid())
            navigator.NavigateTo(navigator.Uri, true);
    }
}

@code
{
    [Parameter] public Guid AgentId { get; set; }
}

@code
{
    [Parameter] public Action ToggleRightSidebar { get; set; }
    [Parameter] public bool CollapseRightSidebar { get; set; }
}