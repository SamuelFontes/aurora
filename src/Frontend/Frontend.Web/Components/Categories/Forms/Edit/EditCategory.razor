@using Backend.Domain.Entities.Categories;
@using Backend.Domain.Entities.SubCategories;
@using Frontend.Web.Services.Authentication;
@using Frontend.Web.Services.Categories;
@using Frontend.Web.Services.SubCategories;
@inject NavigationManager navigator
@inject AuthenticationService _authenticationService;
@inject CategoryService _categoryService;
@inject SubCategoryService _subCategoryService;

<div>
    <div class="card p-4">
        <div class="row">
            <h5 class="mb-3">Category</h5>
            <div class="mb-3 col-sm-12">
                <div class="input-group mb-3">
                    <input type="text" class="form-control" id="sku" placeholder="SKU" @bind="@category.CategoryName">
                    <button class="btn bg-primary-subtle text-primary rounded-end font-medium" type="button" @onclick="UpdateCategory">
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="card p-4">
        <div class="row">
            <h5 class="mb-3">Sub-Categories</h5>
        @foreach(var item in subCategoryList)
        {
            <div class="mb-3 col-sm-12">
                <div class="input-group mb-3">
                    <input type="text" class="form-control" id="subcategoryName" placeholder="SKU" @bind="@item.SubCategoryName">
                    <button class="btn bg-primary-subtle text-primary rounded-end font-medium" type="button" @onclick="() => UpdateSubCategory(item)">
                        Save
                    </button>
                </div>
            </div>
        }
        </div>
    </div>
</div>


@code
{
    [Parameter]
    public string categoryId { get; set; }

    private List<SubCategory> subCategoryList = new List<SubCategory>();

    private Category category = new Category();
    private SubCategory subCategory = new SubCategory();

    protected override async Task OnInitializedAsync()
    {
        var context = await _authenticationService.GetContext();
        category.TenantId = context.Tenant.Id;
        subCategory.TenantId = context.Tenant.Id;

        subCategoryList = (await _subCategoryService.GetSubCategoriesByCategoryId(context.Tenant.Id.ToString(), categoryId.ToString())).ToList();

        var queryString = navigator.Uri.Split('/').Last();
        category = (await _categoryService.GetCategory(category.TenantId.ToString(), categoryId.ToString()));
    }
}

@code
{
    public async Task UpdateCategory()
    {
        try
        {
            if (await _categoryService.UpdateCategory(category)) 
                navigator.NavigateTo("/categories");
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    public async Task UpdateSubCategory(SubCategory selectedSubCategory)
    {
        try
        {
            if (await _subCategoryService.UpdateSubCategory(selectedSubCategory))
                navigator.NavigateTo("/categories");
        }
        catch (Exception ex)
        {
            
            throw;
        }
    }
}