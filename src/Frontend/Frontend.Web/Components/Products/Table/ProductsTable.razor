@using Backend.Domain.Entities.Products;
@using Frontend.Web.Services.Products;
@using Frontend.Web.Util.Session;
@using Newtonsoft.Json;
@inject HttpClient Http
@inject SessionStorageAccessor _session
@inject ProductService _productService
@inject NavigationManager NavigationManager

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var product in products)
    {
    <div class="card">
        <div>
            <h6 class="fw-semibold fs-4">
                #@product.SKU - @product.Name
            </h6>
        </div>
        <div class="d-flex align-items-center justify-content-between">
            <div>
                <h6 class="fw-semibold mb-0">
                    @product.Value
                </h6>
            </div>

            <div>
                <h6 class="fw-semibold mb-0">
                    @product.LiquidWeight
                </h6>
            </div>

            <div>
                <h6 class="fw-semibold mb-0">
                    @product.TotalWeight
                </h6>
            </div>

            <div>
                <a class="cursor-pointer" @onclick="() => Edit(product)">Edit</a>
            </div>
        </div>
    </div>
    }
}


@code {
    private IEnumerable<Product>? products;
    string tenantIdSample = "cabaa57a-37ff-4871-be7d-0187ed3534a5";

    protected override async Task OnInitializedAsync()
    {
        products = await _productService.GetProducts(tenantIdSample);
    }

    private void Edit(Product product)
    {
        NavigationManager.NavigateTo($"/products/edit/{product.Id}");
    }
}
