@using Backend.Domain.Entities.Products;
@using Frontend.Web.Services.Authentication;
@using Frontend.Web.Services.Products;
@inject ProductService _productService
@inject NavigationManager navigator
@inject AuthenticationService _authenticationService;

<form role="form">
    <span>You're creating products using Tenant: Aurora as Default only for testing.</span>
    <span>Your tenant key is: (cabaa57a-37ff-4871-be7d-0187ed3534a5)</span>
    <div class="form-group">
        <label for="username">SKU</label>
        <input type="text" class="form-control" id="sku" placeholder="SKU" @bind="@model.SKU">
    </div>
    <div class="form-group">
        <label for="name">Name</label>
        <input type="text" class="form-control" id="name" placeholder="Name" @bind="@model.Name">
    </div>
    <div class="form-group">
        <label for="description">Description</label>
        <input type="text" class="form-control" id="description" placeholder="Description" @bind="@model.Description">
    </div>
    <div class="form-group">
        <label for="value">Value</label>
        <input type="number" class="form-control" id="value" placeholder="Value" @bind="@model.Value">
    </div>
    <div class="form-group">
        <label for="liquidWeight">LiquidWeight</label>
        <input type="number" class="form-control" id="liquidWeight" placeholder="Liquid Weight" @bind="@model.LiquidWeight">
    </div>
    <div class="form-group">
        <label for="totalWeight">TotalWeight</label>
        <input type="number" class="form-control" id="totalWeight" placeholder="Total Weight" @bind="@model.TotalWeight">
    </div>
    <div class="form-group">
        <label for="productType" class="form-label">Product Type</label>
        <select class="form-select" @bind="@model.ProductTypeId">
            <option value="1">Feedstock</option>
            <option value="2">Intermediate Component</option>
            <option value="3">Product</option>
        </select>
    </div>
    <button type="button" @onclick="UpdateProduct" class="btn btn-default">Save</button>
</form>


@code
{
    [Parameter]
    public string productId { get; set; }

    private Product model = new Product();

    protected override async Task OnInitializedAsync()
    {
        var context = await _authenticationService.GetContext();
        model.TenantId = context.Tenant.Id;

        var queryString = navigator.Uri.Split('/').Last();
        model = await _productService.GetProduct(model.TenantId.ToString(), productId.ToString());
    }

    public async Task UpdateProduct()
    {
        try
        {
            bool updated = await _productService.UpdateProduct(model);
            if (updated) navigator.NavigateTo("/products");
        }
        catch(Exception ex)
        {
            throw;
        }

    }
}