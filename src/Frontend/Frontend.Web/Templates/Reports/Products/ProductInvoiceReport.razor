@page "/report/{tenantId}/product-summary/{productId}"
@using Backend.Domain.Entities.Products
@using Backend.Domain.Entities.Reports;
@using Frontend.Web.Services.Products
@inject ProductService _productService;

<aside class="d-print-none right-sidebar @formCssClass">
    <Frontend.Web.Components.Reports.Forms.ReportTools TemplateSettingsChanged="SetCustomReportSettings"
                                                        CollapseRightSidebar="collapseReportTools"
                                                        ToggleRightSidebar="ToggleReportTools" />
</aside>



<div class="container-fluid">
    <div class="d-print-none row">
        <div class="m-4">
            <button class="btn btn-outline-primary" @onclick="ToggleReportTools">
                <i class="ti ti-tools p-2"></i> @btnText
            </button>
        </div>
    </div>

    <div class="row">
        <div class="report" id="reportContent">
            <h1>Product - #@Product.SKU</h1>
            <div class="info">
                <p><strong>SKU:</strong>@Product.SKU</p>
                <p><strong>GTIN:</strong>@Product.GTIN</p>
                <p><strong>Name:</strong>@Product.Name</p>
                <p><strong>Type:</strong>@(Product.ProductType is null ? "N/A" : Product.ProductType.Name)</p>
                <p><strong>Color:</strong>@(Product.ColorName ?? "N/A")</p>
                <p><strong>Unit Price:</strong>@Product.Value</p>
                <p><strong>Company:</strong> John Doe</p>
                <p><strong>Report Generated by:</strong> john@example.com</p> at <strong>@(new DateTime().Date.ToLocalTime().ToShortDateString())</strong>
            </div>

            <table>
                <thead>
                    <tr>
                        <th>SKU</th>
                        <th>GTIN</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Category</th>
                        <th>Sub-Category</th>
                        <th>Liquid Weight</th>
                        <th>Total Weight</th>
                        <th>Metric Unit</th>
                        <th>Unit Price</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@Product.SKU</td>
                        <td>@Product.GTIN</td>
                        <td>@Product.Name</td>
                        <td>@Product.Description</td>
                        <td>@(Product.Category is null ? "N/A" : Product.Category.CategoryName)</td>
                        <td>@(Product.SubCategory is null ? "N/A" : Product.SubCategory.SubCategoryName)</td>
                        <td>@Product.LiquidWeight.GetValueOrDefault()</td>
                        <td>@Product.TotalWeight.GetValueOrDefault()</td>
                        <td>@(Product.MetricUnitName ?? "N/A")</td>
                        <td>@Product.Value</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<style>
    .report {
        max-width: 100%;
        margin: 0 auto;
        border: 1px solid #212529;
        padding: 20px;
        border-radius: 5px;
    }

        .report h1 {
            font-size: @(CustomSettings.FontTitleSize)px;
            text-align: @(CustomSettings.TitleAlign);
        }

        .report .info {
            margin-bottom: 20px;
        }

            .report .info p {
                margin: 5px 0;
            }

        .report table {
            width: 50%;
            height: 30%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        .report th, .report td {
            border: 1px solid #212529;
            padding: 0.3rem;
            text-align: left;
            box-sizing: border-box;
        }

        .report tfoot {
            font-weight: bold;
        }
</style>

@code 
{
    [Parameter]
    public string tenantId { get; set; }

    [Parameter]
    public string productId { get; set; }
}

@code 
{
    protected override async Task OnInitializedAsync()
    {
        await GetProduct();
        SetCustomReportSettings(CustomSettings);
    }

    public TemplateSettings CustomSettings = new TemplateSettings();
    private void SetCustomReportSettings(TemplateSettings templateSettings)
    {
        CustomSettings = templateSettings;
    }
}

@code
{
    private string? btnText = "Open Report Editor";
    public string? formCssClass = null;
    private bool collapseReportTools = true;

    private void ToggleReportTools()
    {
        collapseReportTools = !collapseReportTools;
        formCssClass = collapseReportTools ? null : "show-menu";
        btnText = collapseReportTools ? "Open Report Editor" : "Close Report Editor";
    }

}

@code
{
    ProductDetail Product = new ProductDetail();
    public async Task GetProduct()
    {
        Product = await _productService.GetProductWithDetails(tenantId, productId);
    }
}